plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply false
    id 'net.neoforged.gradle' version '[6.0.18,6.2)' apply false
}

// Determine which loader to build for based on project property
ext.buildTarget = project.hasProperty('buildTarget') ? project.property('buildTarget') : 'forge'

// Apply the appropriate plugin based on build target
if (buildTarget == 'neoforge') {
    apply plugin: 'net.neoforged.gradle'
} else {
    apply plugin: 'net.minecraftforge.gradle'
}

version = mod_version
group = mod_group_id

base {
    if (buildTarget == 'neoforge') {
        archivesName = "${mod_id}-neoforge-${minecraft_version}"
    } else {
        archivesName = "${mod_id}-forge-${minecraft_version}"
    }
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
println "Building for: ${buildTarget}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            
            if (buildTarget == 'neoforge') {
                systemProperty 'forge.logging.markers', 'REGISTRIES'
                systemProperty 'forge.logging.console.level', 'debug'
            } else {
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
            }

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            if (buildTarget == 'neoforge') {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
            } else {
                property 'forge.enabledGameTestNamespaces', mod_id
            }
        }

        server {
            if (buildTarget == 'neoforge') {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
                programArgument '--nogui'
            } else {
                property 'forge.enabledGameTestNamespaces', mod_id
                args '--nogui'
            }
        }

        gameTestServer {
            if (buildTarget == 'neoforge') {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
            } else {
                property 'forge.enabledGameTestNamespaces', mod_id
            }
        }

        data {
            workingDirectory project.file('run-data')
            if (buildTarget == 'neoforge') {
                programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', file('src/main/resources/').absolutePath
            } else {
                args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        name = 'MinecraftForge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    if (buildTarget == 'neoforge') {
        implementation "net.neoforged:neoforge:${neoforge_version}"
    } else {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    }
}

// Create platform-specific source sets
sourceSets {
    forge {
        java {
            srcDir 'src/forge/java'
        }
        resources {
            srcDir 'src/forge/resources'
        }
    }
    neoforge {
        java {
            srcDir 'src/neoforge/java'
        }
        resources {
            srcDir 'src/neoforge/resources'
        }
    }
}

// Include platform-specific sources based on build target
if (buildTarget == 'neoforge') {
    sourceSets.main.java.srcDirs += sourceSets.neoforge.java.srcDirs
    sourceSets.main.resources.srcDirs += sourceSets.neoforge.resources.srcDirs
} else {
    sourceSets.main.java.srcDirs += sourceSets.forge.java.srcDirs
    sourceSets.main.resources.srcDirs += sourceSets.forge.resources.srcDirs
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    
    if (buildTarget == 'neoforge') {
        replaceProperties.putAll([
            neoforge_version: neoforge_version, neoforge_version_range: neoforge_version_range,
            loader_version_range: neoforge_version_range,
        ])
    } else {
        replaceProperties.putAll([
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
        ])
    }
    
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // Only finalize with reobfJar for Forge
    if (buildTarget == 'forge') {
        finalizedBy 'reobfJar'
    }
}

// Create tasks for building both platforms
task buildForge {
    group = 'build'
    description = 'Builds the mod for Forge'
    doLast {
        project.exec {
            commandLine './gradlew', 'clean', 'build', '-PbuildTarget=forge'
        }
    }
}

task buildNeoforge {
    group = 'build'
    description = 'Builds the mod for NeoForge'
    doLast {
        project.exec {
            commandLine './gradlew', 'clean', 'build', '-PbuildTarget=neoforge'
        }
    }
}

task buildAll {
    group = 'build'
    description = 'Builds the mod for both Forge and NeoForge'
    dependsOn buildForge, buildNeoforge
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
